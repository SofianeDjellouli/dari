// Generated by ReScript, PLEASE EDIT WITH CARE
"use strict"

var Test = require("rescript-test/src/Test.bs.js")
var Curry = require("rescript/lib/js/curry.js")
var Assert = require("../../assert/Assert.bs.js")
var FormState = require("../../../app/core/form/state/FormState.bs.js")
var Belt_MapString = require("rescript/lib/js/belt_MapString.js")

function emptyReducer(state, action) {
  if (action === "Empty") {
    return
  } else {
    return state
  }
}

function makeSetEmailReducer(next, state, action) {
  if (typeof action === "object" && action.NAME === "SetEmail") {
    return Belt_MapString.set(state, "email", {
      value: action.VAL,
      error: "",
    })
  } else {
    return Curry._2(next, state, action)
  }
}

function reducer(param, param$1) {
  return FormState.makeReducer(
    function (param, param$1) {
      return makeSetEmailReducer(emptyReducer, param, param$1)
    },
    param,
    param$1
  )
}

Test.test("Handles Change action", function (param) {
  var stateArray = [
    [
      "email",
      {
        value: "",
        error: "Required",
      },
    ],
    [
      "password",
      {
        value: "",
        error: "Required",
      },
    ],
  ]
  var state = Belt_MapString.fromArray(stateArray)
  var action_1 = {
    name: "email",
    value: "myemail@gmail.com",
  }
  var action = {
    NAME: "Change",
    VAL: action_1,
  }
  var result = reducer(state, action)
  var expectedArray = [
    [
      "email",
      {
        value: "myemail@gmail.com",
        error: "",
      },
    ],
    [
      "password",
      {
        value: "",
        error: "Required",
      },
    ],
  ]
  var expected = Belt_MapString.fromArray(expectedArray)
  return Assert.assertMapEqual(result, expected)
})

Test.test("Handles SetState action", function (param) {
  var stateArray = [
    [
      "email",
      {
        value: "",
        error: "",
      },
    ],
    [
      "password",
      {
        value: "12345678",
        error: "",
      },
    ],
  ]
  var state = Belt_MapString.fromArray(stateArray)
  var newStateArray = [
    [
      "email",
      {
        value: "",
        error: "required",
      },
    ],
    [
      "password",
      {
        value: "12345678",
        error: "",
      },
    ],
  ]
  var newState = Belt_MapString.fromArray(newStateArray)
  var action = {
    NAME: "SetState",
    VAL: newState,
  }
  var result = reducer(state, action)
  return Assert.assertMapEqual(result, newState)
})

Test.test("Handles Empty action", function (param) {
  var stateArray = [
    [
      "email",
      {
        value: "",
        error: "",
      },
    ],
    [
      "password",
      {
        value: "12345678",
        error: "",
      },
    ],
  ]
  var state = Belt_MapString.fromArray(stateArray)
  var result = reducer(state, "Empty")
  return Assert.assertMapEqual(result, undefined)
})

Test.test("Handles SetEmail action", function (param) {
  var stateArray = [
    [
      "email",
      {
        value: "",
        error: "",
      },
    ],
    [
      "password",
      {
        value: "12345678",
        error: "",
      },
    ],
  ]
  var state = Belt_MapString.fromArray(stateArray)
  var newStateArray = [
    [
      "email",
      {
        value: "test@test.com",
        error: "",
      },
    ],
    [
      "password",
      {
        value: "12345678",
        error: "",
      },
    ],
  ]
  var newState = Belt_MapString.fromArray(newStateArray)
  var result = reducer(state, {
    NAME: "SetEmail",
    VAL: "test@test.com",
  })
  return Assert.assertMapEqual(result, newState)
})

exports.emptyReducer = emptyReducer
exports.makeSetEmailReducer = makeSetEmailReducer
exports.reducer = reducer
/*  Not a pure module */
