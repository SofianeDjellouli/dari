// Generated by ReScript, PLEASE EDIT WITH CARE
"use strict"

var Test = require("rescript-test/src/Test.bs.js")
var Assert = require("../../assert/Assert.bs.js")
var Belt_MapString = require("rescript/lib/js/belt_MapString.js")
var EmailValidation = require("../../../app/core/form/validations/email/EmailValidation.bs.js")
var LoginValidation = require("../../../app/modules/auth/login/validation/LoginValidation.bs.js")
var PasswordValidation = require("../../../app/core/form/validations/password/PasswordValidation.bs.js")
var RequiredValidation = require("../../../app/core/form/validations/required/RequiredValidation.bs.js")

Test.test("Validates valid state", function (param) {
  var stateArray = [
    [
      "email",
      {
        value: "myemail@gmail.com",
        error: "",
      },
    ],
    [
      "password",
      {
        value: "12345678",
        error: "",
      },
    ],
  ]
  var state = Belt_MapString.fromArray(stateArray)
  var result = LoginValidation.validate(state)
  return Assert.assertMapEqual(result, state)
})

Test.test("Invalidates empty required fields", function (param) {
  var stateArray = [
    [
      "email",
      {
        value: "",
        error: "",
      },
    ],
    [
      "password",
      {
        value: "123456789",
        error: "",
      },
    ],
  ]
  var state = Belt_MapString.fromArray(stateArray)
  var result = LoginValidation.validate(state)
  var expectedArray = [
    [
      "email",
      {
        value: "",
        error: RequiredValidation.requiredField,
      },
    ],
    [
      "password",
      {
        value: "123456789",
        error: "",
      },
    ],
  ]
  var expected = Belt_MapString.fromArray(expectedArray)
  return Assert.assertMapEqual(result, expected)
})

Test.test("Invalidates too short password", function (param) {
  var stateArray = [
    [
      "email",
      {
        value: "myemail@gmail.com",
        error: "",
      },
    ],
    [
      "password",
      {
        value: "1",
        error: "",
      },
    ],
  ]
  var state = Belt_MapString.fromArray(stateArray)
  var result = LoginValidation.validate(state)
  var expectedArray = [
    [
      "email",
      {
        value: "myemail@gmail.com",
        error: "",
      },
    ],
    [
      "password",
      {
        value: "1",
        error: PasswordValidation.tooShortPassword,
      },
    ],
  ]
  var expected = Belt_MapString.fromArray(expectedArray)
  return Assert.assertMapEqual(result, expected)
})

Test.test("Invalidates too long password", function (param) {
  var stateArray = [
    [
      "email",
      {
        value: "myemail@gmail.com",
        error: "",
      },
    ],
    [
      "password",
      {
        value: "1234567890123456789012345678901234567890",
        error: "",
      },
    ],
  ]
  var state = Belt_MapString.fromArray(stateArray)
  var result = LoginValidation.validate(state)
  var expectedArray = [
    [
      "email",
      {
        value: "myemail@gmail.com",
        error: "",
      },
    ],
    [
      "password",
      {
        value: "1234567890123456789012345678901234567890",
        error: PasswordValidation.tooLongPassword,
      },
    ],
  ]
  var expected = Belt_MapString.fromArray(expectedArray)
  return Assert.assertMapEqual(result, expected)
})

Test.test("Invalidates invalid email", function (param) {
  var stateArray = [
    [
      "email",
      {
        value: "myemail@gmail",
        error: "",
      },
    ],
    [
      "password",
      {
        value: "123456789",
        error: "",
      },
    ],
  ]
  var state = Belt_MapString.fromArray(stateArray)
  var result = LoginValidation.validate(state)
  var expectedArray = [
    [
      "email",
      {
        value: "myemail@gmail",
        error: EmailValidation.invalidEmail,
      },
    ],
    [
      "password",
      {
        value: "123456789",
        error: "",
      },
    ],
  ]
  var expected = Belt_MapString.fromArray(expectedArray)
  return Assert.assertMapEqual(result, expected)
})

/*  Not a pure module */
