// Generated by ReScript, PLEASE EDIT WITH CARE
"use strict"

var Curry = require("rescript/lib/js/curry.js")
var React = require("react")
var Spread = require("../../../../../core/components/spread/Spread.bs.js")
var Debounce = require("../../../../../core/fp/Debounce.bs.js")
var Belt_Array = require("rescript/lib/js/belt_Array.js")
var React$1 = require("@ionic/react")
var Icons = require("ionicons/icons")
var DataClient = require("next/data-client")
var Delete = require("../../../mutations/delete").default
var UpdateName = require("../../../mutations/update-name").default
var UpdateLevel = require("../../../mutations/update-level").default

var presentProps = {
  icon: Icons.heart,
  name: "Present",
}

var lackingProps = {
  icon: Icons.heartHalf,
  name: "Lacking",
}

var missingProps = {
  icon: Icons.heartDislikeOutline,
  name: "Missing",
}

function getErrandItemProps(level) {
  if (level === "Missing") {
    return {
      color: "danger",
      firstAction: presentProps,
      secondAction: lackingProps,
    }
  } else if (level === "Present") {
    return {
      color: "success",
      firstAction: lackingProps,
      secondAction: missingProps,
    }
  } else {
    return {
      color: "warning",
      firstAction: presentProps,
      secondAction: missingProps,
    }
  }
}

var updateErrandLevel = UpdateLevel

var updateErrandName = UpdateName

var deleteErrand = Delete

function ErrandItem(Props) {
  var errand = Props.errand
  var refetch = Props.refetch
  var match = React.useState(function () {
    return errand.name
  })
  var setValue = match[1]
  var match$1 = DataClient.useMutation(updateErrandLevel, undefined)
  var updateErrandLevelMutation = match$1[0]
  var match$2 = DataClient.useMutation(updateErrandName, undefined)
  var updateErrandNameMutation = match$2[0]
  var match$3 = DataClient.useMutation(deleteErrand, undefined)
  var deleteErrandMutation = match$3[0]
  var handleRefetch = function (promise) {
    promise.then(Curry.__1(refetch))
  }
  var handleUpdateLevelClick = function (e) {
    var name = e.currentTarget.dataset.name
    return handleRefetch(
      updateErrandLevelMutation({
        id: errand.id,
        name: name,
      })
    )
  }
  var handleDeleteClick = function (param) {
    return handleRefetch(deleteErrandMutation(errand.id))
  }
  var handleChange = function (e) {
    var targetValue = e.target.value
    return Curry._1(setValue, function (param) {
      return targetValue
    })
  }
  var inputRef = React.useRef(null)
  React.useEffect(function () {
    var inputOption = inputRef.current
    var handleInput = Debounce.debounce(function (e) {
      var value = e.target.value
      return handleRefetch(
        updateErrandNameMutation({
          id: errand.id,
          name: value,
        })
      )
    }, 300)
    if (!(inputOption == null)) {
      inputOption.addEventListener("input", handleInput)
      return function (param) {
        inputOption.removeEventListener("input", handleInput)
      }
    }
  }, [])
  var match$4 = getErrandItemProps(errand.level)
  var color = match$4.color
  return React.createElement(
    React$1.IonItemSliding,
    {
      children: null,
    },
    React.createElement(
      React$1.IonItem,
      {
        children: null,
        color: color,
      },
      React.createElement(React$1.IonInput, {
        value: match[0],
        ref: inputRef,
        onIonChange: handleChange,
      }),
      Belt_Array.map([match$4.firstAction, match$4.secondAction], function (action) {
        return React.createElement(Spread.make, {
          props: {
            "data-name": action.name,
          },
          children: React.createElement(React$1.IonIcon, {
            slot: "end",
            icon: action.icon,
            onClick: handleUpdateLevelClick,
          }),
          key: action.name,
        })
      })
    ),
    React.createElement(React$1.IonItemOptions, {
      children: React.createElement(React$1.IonItemOption, {
        children: React.createElement(React$1.IonIcon, {
          icon: Icons.trashBin,
        }),
        onClick: handleDeleteClick,
        color: color,
      }),
      side: "end",
    })
  )
}

var make = ErrandItem

exports.presentProps = presentProps
exports.lackingProps = lackingProps
exports.missingProps = missingProps
exports.getErrandItemProps = getErrandItemProps
exports.updateErrandLevel = updateErrandLevel
exports.updateErrandName = updateErrandName
exports.deleteErrand = deleteErrand
exports.make = make
/* presentProps Not a pure module */
